// Max Weber
// API Analytics
// 1/7/2022
// I used source code from the following websites to complete this assignment: www.geeksforgeeks.com/insertion-sort
using SortInterface;
using RandomNumAPI;
using RandomWordAPI;
namespace InsertionSort
{
    //This typed class includes methods from the ISorter interface
    //This class will sort a list of a given type T using an Insertion Sort
    //This class can also be used to sort a list of randomly generated information utilizing an API
    public class InsertionSorter<T> : ISorter<T>
    {
        //This is used to count the amount of iterations within a set of sorts
        public static int Iterations { get; set; }
        //Every time an instance of this class is initialized, it will reset the Iterations counter.
        public InsertionSorter()
        {
            Iterations = 0;
        }
        //Performs an Insertion Sort on a list with items of data type T.
        //Returns the sorted list.
        public List<T> Sort(List<T> list)
        {
            List<T> resultList = new List<T>();
            return resultList;
        }
        //Performs an insertion sort on a random list of numbers generated by an API.
        //Returns the sorted list.
        public async Task<List<int>> SortNewNumList(RandomNumList rList)
        {
            //gets the list of numbers from the API
            List<int> nums = await rList.GetListAsync();
            //The following sort is from geeksforgeeks.org/insertion-sort
            int n = nums.Count;
            for (int i = 1; i < n; ++i) 
            {
                int key = nums[i];
                int j = i - 1;
                while (j >= 0 && nums[j] > key) 
                {
                    //Increases the iterations counter every time the list is iterated through for a sort.
                    Iterations++;
                    nums[j + 1] = nums[j];
                    j = j - 1;
                }
                //Iterations++;
                nums[j + 1] = key;
            }
            //Returns the sorted list.
            return nums;
        }
        //Performs an insertion sort on a random list of words generated by an API.
        //Returns the sorted list.
        public async Task<List<string>> SortNewWordList(RandomWordList rList)
        {
            //gets the list of numbers from the API
            List<string> words = await rList.GetListAsync();
            //The following sort is from geeksforgeeks.org/insertion-sort
            int n = words.Count;
            for (int i = 1; i < n; ++i) 
            {
                string key = words[i];
                int j = i - 1;
                while (j >= 0 && words[j].CompareTo(key) > 0) 
                {
                    //Increases the iterations counter every time the list is iterated through for a sort.
                    Iterations++;
                    words[j + 1] = words[j];
                    j = j - 1;
                }
                //Iterations++;
                words[j + 1] = key;
            }
            //Returns the sorted list.
            return words;
        }

    }
}